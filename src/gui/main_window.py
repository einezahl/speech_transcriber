# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\src\gui\template\mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import Qt, QRect, QMetaObject, QCoreApplication
from PyQt5.QtWidgets import QMainWindow, QWidget, QPushButton, QListWidget, QTextBrowser, QMenuBar, QStatusBar, QMenu, QAction


class MainWindow(QMainWindow):

    def __init__(self):
        super().__init__()
        self.__initializeUI()

    def __initializeUI(self):
        self.setObjectName("MainWindow")
        self.resize(771, 386)
        self.__setupMenuAndStatusbar()
        self.__setupWidgetsAndLayout()
        self.__retranslateUI()
        QMetaObject.connectSlotsByName(self)

    def __setupMenuAndStatusbar(self):
        self.menubar = QMenuBar()
        self.menubar.setGeometry(QRect(0, 0, 771, 21))
        self.menubar.setObjectName("menubar")

        self.menuSpeech_Transcriber = QMenu(self.menubar)
        self.menuSpeech_Transcriber.setObjectName("menuSpeech_Transcriber")

        self.setMenuBar(self.menubar)
        self.statusbar = QStatusBar()
        self.statusbar.setObjectName("statusbar")

        self.setStatusBar(self.statusbar)
        self.actionFile = QAction()
        self.actionFile.setObjectName("actionFile")

        self.menuSpeech_Transcriber.addAction(self.actionFile)
        self.menubar.addAction(self.menuSpeech_Transcriber.menuAction())

    def __setupWidgetsAndLayout(self):
        self.centralwidget = QWidget()
        self.centralwidget.setObjectName("centralwidget")
        self.setCentralWidget(self.centralwidget)

        self.listWidget = QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QRect(40, 40, 291, 231))
        self.listWidget.setObjectName("listView")

        self.start_stop_recording_button = QPushButton(self.centralwidget)
        self.start_stop_recording_button.setGeometry(QRect(40, 280, 91, 31))
        self.start_stop_recording_button.setObjectName(
            "start_stop_recording_button")

        self.play_recording_button = QPushButton(self.centralwidget)
        self.play_recording_button.setEnabled(False)
        self.play_recording_button.setGeometry(
            QRect(140, 280, 91, 31))
        self.play_recording_button.setObjectName(
            "play_recording_recording_button")

        self.delete_recording_button = QPushButton(self.centralwidget)
        self.delete_recording_button.setGeometry(QRect(240, 280, 91, 31))
        self.delete_recording_button.setObjectName("delete_recording_button")

        self.transcribe_recording_button = QPushButton(self.centralwidget)
        self.transcribe_recording_button.setGeometry(QRect(360, 130, 81, 31))
        self.transcribe_recording_button.setObjectName("transcribe_button")

        self.textBrowser = QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QRect(470, 80, 231, 131))
        self.textBrowser.setObjectName("textBrowser")

    def __retranslateUI(self):
        # TODO: just put it into setuplayout function maybe
        """
        This method got generated automatically by PyQt5 designer. Ugly AF.
        """
        _translate = QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.start_stop_recording_button.setText(
            _translate("MainWindow", "Record"))
        self.play_recording_button.setText(
            _translate("MainWindow", "Play"))
        self.delete_recording_button.setText(
            _translate("MainWindow", "Delete"))
        self.transcribe_recording_button.setText(
            _translate("MainWindow", "Transcribe"))
        self.menuSpeech_Transcriber.setTitle(_translate("MainWindow", "File"))
        self.actionFile.setText(_translate("MainWindow", "Import API Key"))

    def playAudio(self):
        print("playAudio")

    def append_to_list(self, recording):
        self.listWidget.addItem(recording)

    def remove_from_list(self, recording):
        self.listWidget.takeItem(self.listWidget.row(recording))

    # def keyPressEvent(self, event):
    #     if event.key() == Qt.Key_Escape:
    #         self.close()
